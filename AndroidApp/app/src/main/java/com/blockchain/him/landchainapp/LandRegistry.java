package com.blockchain.him.landchainapp;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class LandRegistry extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610e51806100326000396000f30060806040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166375440637811461007157806375c8933b1461014f57806395c671d8146102a9578063ab9e611f1461040c578063b468f7d11461063b575b600080fd5b34801561007d57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261014d95833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506106629350505050565b005b34801561015b57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261014d94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505084359550505060209092013591506107309050565b3480156102b557600080fd5b506102c160043561083d565b60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561030c5781810151838201526020016102f4565b50505050905090810190601f1680156103395780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561036c578181015183820152602001610354565b50505050905090810190601f1680156103995780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156103cc5781810151838201526020016103b4565b50505050905090810190601f1680156103f95780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561041857600080fd5b50610424600435610a4a565b60405180806020018060200180602001806020018060200187815260200186810386528c818151815260200191508051906020019080838360005b8381101561047757818101518382015260200161045f565b50505050905090810190601f1680156104a45780820380516001836020036101000a031916815260200191505b5086810385528b5181528b516020918201918d019080838360005b838110156104d75781810151838201526020016104bf565b50505050905090810190601f1680156105045780820380516001836020036101000a031916815260200191505b5086810384528a5181528a516020918201918c019080838360005b8381101561053757818101518382015260200161051f565b50505050905090810190601f1680156105645780820380516001836020036101000a031916815260200191505b5086810383528951815289516020918201918b019080838360005b8381101561059757818101518382015260200161057f565b50505050905090810190601f1680156105c45780820380516001836020036101000a031916815260200191505b5086810382528851815288516020918201918a019080838360005b838110156105f75781810151838201526020016105df565b50505050905090810190601f1680156106245780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34801561064757600080fd5b50610650610d86565b60408051918252519081900360200190f35b60005473ffffffffffffffffffffffffffffffffffffffff16331461068657600080fd5b6040805160a081018252868152602080820187815282840187905260608301869052608083018590526003546000908152600283529390932082518155925180519293926106da9260018501920190610d8d565b50604082015180516106f6916002840191602090910190610d8d565b5060608201518051610712916003840191602090910190610d8d565b50608091909101516004909101555050600380546001019055505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461075457600080fd5b6040805160e0810182528881526020808201899052818301889052606082018790526080820186905260a0820185905260c082018490526003546000908152600182529290922081518051929391926107b09284920190610d8d565b5060208281015180516107c99260018501920190610d8d565b50604082015180516107e5916002840191602090910190610d8d565b5060608201518051610801916003840191602090910190610d8d565b506080820151805161081d916004840191602090910190610d8d565b5060a0820151600582015560c09091015160069091015550505050505050565b600060608080835b600354811015610a4257600081815260026020526040902060040154861415610a3a57600081815260026020818152604092839020805460018083018054875192811615610100026000190116869004601f8101869004860283018601909752868252919591948301936003909301929091859183018282801561090a5780601f106108df5761010080835404028352916020019161090a565b820191906000526020600020905b8154815290600101906020018083116108ed57829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156109985780601f1061096d57610100808354040283529160200191610998565b820191906000526020600020905b81548152906001019060200180831161097b57829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295975086945092508401905082828015610a265780601f106109fb57610100808354040283529160200191610a26565b820191906000526020600020905b815481529060010190602001808311610a0957829003601f168201915b505050505090509450945094509450610a42565b600101610845565b509193509193565b6060808080806000805b600354811015610d7c57600081815260016020526040902060060154881415610d74576000818152600160208181526040928390206005810154815485516002828716156101000260001901909216829004601f81018690048602820186019097528681529295948601949086019360038701936004880193929091889190830182828015610b245780601f10610af957610100808354040283529160200191610b24565b820191906000526020600020905b815481529060010190602001808311610b0757829003601f168201915b5050885460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959b508a945092508401905082828015610bb25780601f10610b8757610100808354040283529160200191610bb2565b820191906000526020600020905b815481529060010190602001808311610b9557829003601f168201915b5050875460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959a5089945092508401905082828015610c405780601f10610c1557610100808354040283529160200191610c40565b820191906000526020600020905b815481529060010190602001808311610c2357829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295995088945092508401905082828015610cce5780601f10610ca357610100808354040283529160200191610cce565b820191906000526020600020905b815481529060010190602001808311610cb157829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295985087945092508401905082828015610d5c5780601f10610d3157610100808354040283529160200191610d5c565b820191906000526020600020905b815481529060010190602001808311610d3f57829003601f168201915b50505050509150965096509650965096509650610d7c565b600101610a54565b5091939550919395565b6003545b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610dce57805160ff1916838001178555610dfb565b82800160010185558215610dfb579182015b82811115610dfb578251825591602001919060010190610de0565b50610e07929150610e0b565b5090565b610d8a91905b80821115610e075760008155600101610e115600a165627a7a723058207136773fcb490877b455bdf6907dcdc87756cec586a3e5c21d71e68d5af337f70029";

    public static final String FUNC_REGISTEROWNERDATA = "registerOwnerData";

    public static final String FUNC_REGISTERLANDDATA = "registerLandData";

    public static final String FUNC_GETOWNERDATA = "getOwnerData";

    public static final String FUNC_GETLANDDATA = "getLandData";

    public static final String FUNC_GETTOTALDATACOUNT = "getTotalDataCount";

    protected LandRegistry(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LandRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<TransactionReceipt> registerOwnerData(BigInteger _aadharNumber, String _ownerAddress, String _sonOf, String _town, BigInteger _id) {
        final Function function = new Function(
                FUNC_REGISTEROWNERDATA, 
                Arrays.<Type>asList(new Uint256(_aadharNumber),
                new Utf8String(_ownerAddress),
                new Utf8String(_sonOf),
                new Utf8String(_town),
                new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerLandData(String _landOwner, String _landExOwner, String _district, String _taluk, String _vilage, BigInteger _pattanumber, BigInteger _id) {
        final Function function = new Function(
                FUNC_REGISTERLANDDATA, 
                Arrays.<Type>asList(new Utf8String(_landOwner),
                new Utf8String(_landExOwner),
                new Utf8String(_district),
                new Utf8String(_taluk),
                new Utf8String(_vilage),
                new Uint256(_pattanumber),
                new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<BigInteger, String, String, String>> getOwnerData(BigInteger _id) {
        final Function function = new Function(FUNC_GETOWNERDATA, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, String, String>>(
                new Callable<Tuple4<BigInteger, String, String, String>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<String, String, String, String, String, BigInteger>> getLandData(BigInteger _id) {
        final Function function = new Function(FUNC_GETLANDDATA, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, BigInteger>>(
                new Callable<Tuple6<String, String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getTotalDataCount() {
        final Function function = new Function(FUNC_GETTOTALDATACOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<LandRegistry> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LandRegistry.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<LandRegistry> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LandRegistry.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static LandRegistry load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LandRegistry(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static LandRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LandRegistry(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
